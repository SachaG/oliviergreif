---
import Oeuvre from "../../../components/catalogue/oeuvre/Oeuvre.compact.astro";
import AllCatalog from "../../../components/catalogue/AllCatalog.astro";
import {
	capitalizeFirstLetter,
	getInstrumentsGroups,
	getItemsStaticPaths,
	getString,
	instrumentGroups,
	SectionId,
} from "../../../helpers";
import { convertTitle } from "../../../helpers";
import { getCatalogue } from "../../../helpers";
import Layout from "../../../layouts/Layout.astro";
import type { WithId } from "../../../types";
import Instruments from "../../../components/catalogue/Instruments.astro";
import SubgridLayout from "../../../components/layouts/SubgridLayout.astro";
import T from "../../../components/T.astro";
import PageLayout from "../../../components/layouts/PageLayout.astro";
import Categories from "../../../components/catalogue/Categories.astro";

const { id } = Astro.params;
const instrumentGroupId = id as keyof typeof instrumentGroups;

export function getStaticPaths() {
	return getItemsStaticPaths(
		getInstrumentsGroups().map(
			({ id }) => ({ id: convertTitle(id) }) as WithId
		)
	);
}

const instruments = instrumentGroups[instrumentGroupId];
const catalogue = getCatalogue({ instrumentGroupId });
const title = instrumentGroupId || "";

const catalogueByNumberOfInstruments = [...Array(100)]
	.map((_x, count) => ({
		count: count + 1,
		items: catalogue.filter((o) => o.instruments?.length === count + 1),
	}))
	.filter(({ items }) => items.length > 0);
---

<script>
	import { convertTitle } from "../../../helpers";

	// Find our component DOM on the page.
	const checkboxes =
		document.querySelectorAll<HTMLInputElement>(".instrument-toggle");

	// Add event listeners to fire confetti when a button is clicked.
	checkboxes.forEach((checkbox) => {
		checkbox.addEventListener("click", () => {
			// Get the checked/unchecked status
			const isChecked = checkbox.checked;

			// Get the value of the data-filter attribute
			const instrument = checkbox.getAttribute("data-instrument");
			const oeuvres = document.querySelectorAll<HTMLDivElement>(
				`.instrument-${convertTitle(instrument || "")}`
			);

			if (isChecked) {
				oeuvres.forEach((oeuvre) => {
					oeuvre.classList.add("visible");
					oeuvre.classList.remove("hidden");
				});
			} else {
				oeuvres.forEach((oeuvre) => {
					oeuvre.classList.add("hidden");
					oeuvre.classList.remove("visible");
				});
			}
		});
	});
</script>

<Layout title={`${getString("catalogue")?.t} (${title})`}>
	<PageLayout sectionId={SectionId.CATALOGUE}>
		<h2
			slot="page-heading"
			style={`view-transition-name: heading-catalogue`}
		>
			<T k="catalogue" />: <T
				k={instrumentGroupId}
				fallback={capitalizeFirstLetter(title)}
			/> ({catalogue.length}
			<T k="oeuvre" kPlural="oeuvres" count={catalogue.length} />)
		</h2>
		<div slot="page-subheading">
			{
				instruments.length > 1 && (
					<div class="instruments-list">
						{instruments.map((instrument) => (
							<h5>
								<label>
									<input
										class="instrument-toggle"
										type="checkbox"
										checked="checked"
										data-instrument={instrument}
									/>
									<span>
										{capitalizeFirstLetter(instrument)}
									</span>
								</label>
							</h5>
						))}
					</div>
				)
			}
		</div>
		{
			catalogueByNumberOfInstruments.map(({ count, items }) => (
				<div class="subcontainer" slot="page-content">
					<SubgridLayout>
						<h4 class="count-title" slot="col1">
							<span class="count-heading">
								{count}
								<T
									k="instrument"
									kPlural="instruments"
									count={count}
								/>
								{/* <span>
										({items.length}{" "}
										{pluralize("Å“uvre", items.length)})
									</span> */}
							</span>
						</h4>
						<div class="feed-items" slot="main">
							{items.map((oeuvre) => (
								<Oeuvre id={oeuvre.id} />
							))}
						</div>
					</SubgridLayout>
				</div>
			))
		}
		<AllCatalog slot="page-sidebar" />
		<Categories slot="page-sidebar" />
		<Instruments
			slot="page-sidebar"
			currentInstrumentId={instrumentGroupId}
		/>
	</PageLayout>

	<style type="text/scss">
		.count-title {
			position: sticky;
			top: 0px;
			font-size: 1.6rem;
		}
		@supports (selector(:has(*))) {
			.subcontainer:not(:has(.visible)) {
				display: none;
			}
		}
		.instruments-list {
			display: flex;
			gap: var(--halfSpacing);
		}
		.count-heading {
			white-space: nowrap;
		}
	</style>
</Layout>
