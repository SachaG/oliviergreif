---
import Oeuvre from "../../../components/catalogue/oeuvre/Oeuvre.compact.astro";
import {
	capitalizeFirstLetter,
	getInstrumentsGroups,
	getItemsStaticPaths,
	instrumentGroups,
} from "../../../helpers";
import { convertTitle, pluralize } from "../../../helpers";
import { getCatalogue } from "../../../helpers";
import Layout from "../../../layouts/Layout.astro";
import type { WithId } from "../../../types";
import Instruments from "../../../components/catalogue/Instruments.astro";
import SubgridLayout from "../../../components/SubgridLayout.astro";
import T from "../../../components/T.astro";

const { id } = Astro.params;
const instrumentGroupId = id as keyof typeof instrumentGroups;

export function getStaticPaths() {
	return getItemsStaticPaths(
		getInstrumentsGroups().map(
			(instrument) => ({ id: convertTitle(instrument) }) as WithId,
		),
	);
}

const instruments = instrumentGroups[instrumentGroupId];
const catalogue = getCatalogue({ instrumentGroupId });
const title = instrumentGroupId || "";

const catalogueByNumberOfInstruments = [...Array(100)]
	.map((x, count) => ({
		count: count + 1,
		items: catalogue.filter((o) => o.instruments?.length === count + 1),
	}))
	.filter(({ items }) => items.length > 0);
---

<script>
	import { convertTitle } from "../../../helpers";

	// Find our component DOM on the page.
	const checkboxes =
		document.querySelectorAll<HTMLInputElement>(".instrument-toggle");

	// Add event listeners to fire confetti when a button is clicked.
	checkboxes.forEach((checkbox) => {
		checkbox.addEventListener("click", (e) => {
			// Get the checked/unchecked status
			const isChecked = checkbox.checked;

			// Get the value of the data-filter attribute
			const instrument = checkbox.getAttribute("data-instrument");
			const oeuvres = document.querySelectorAll<HTMLDivElement>(
				`.instrument-${convertTitle(instrument || "")}`,
			);

			if (isChecked) {
				oeuvres.forEach((oeuvre) => {
					oeuvre.classList.add("visible");
					oeuvre.classList.remove("hidden");
				});
			} else {
				oeuvres.forEach((oeuvre) => {
					oeuvre.classList.add("hidden");
					oeuvre.classList.remove("visible");
				});
			}
		});
	});
</script>

<Layout title={`Catalogue (${title})`}>
	<div>
		<h2>
			Catalogue: <T
				k={instrumentGroupId}
				fallback={capitalizeFirstLetter(title)}
			/> ({catalogue.length}
			<T k="oeuvre" kPlural="oeuvres" count={catalogue.length} />)
		</h2>
		{
			instruments.length > 1 && (
				<div class="instruments-list">
					{instruments.map((instrument) => (
						<h5>
							<label>
								<input
									class="instrument-toggle"
									type="checkbox"
									checked="checked"
									data-instrument={instrument}
								/>
								<span>{capitalizeFirstLetter(instrument)}</span>
							</label>
						</h5>
					))}
				</div>
			)
		}
	</div>
	<div class="grid">
		<main>
			{
				catalogueByNumberOfInstruments.map(({ count, items }) => (
					<div class="subcontainer">
						<SubgridLayout>
							<h4 class="count-title" slot="col1">
								<span class="count-heading">
									{count}
									<T
										k="instrument"
										kPlural="instruments"
										count={count}
									/>
									{/* <span>
										({items.length}{" "}
										{pluralize("Å“uvre", items.length)})
									</span> */}
								</span>
							</h4>
							<div class="items" slot="main">
								{items.map((oeuvre) => (
									<Oeuvre id={oeuvre.id} />
								))}
							</div>
						</SubgridLayout>
					</div>
				))
			}
		</main>
		<section class="sidebar">
			<div class="sidebar-contents">
				<Instruments currentInstrumentId={instrumentGroupId} />
			</div>
		</section>
	</div>
</Layout>

<style type="text/scss">
	.count-title {
		position: sticky;
		top: 0px;
		font-size: 2rem;
	}
	@supports (selector(:has(*))) {
		.subcontainer:not(:has(.visible)) {
			display: none;
		}
	}
	.instruments-list {
		display: flex;
		gap: var(--halfSpacing);
	}
	.count-heading {
		white-space: nowrap;
	}
</style>
